//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { PhonenumberEntity } from './db/Phonenumber.entity';
import { ReportEntity } from './db/Report.entity';
import { UserEntity } from './db/User.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      PhonenumberEntity,
      ReportEntity,
      UserEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      Phonenumber: [
        {
          number: '+14155552671',
          isScam: true,
          description:
            'Reported as a robocall pretending to be from the IRS. Multiple users flagged this number as a scam.',
          dateReported: '2024-06-10T14:23:00Z',
        },
        {
          number: '+442083661177',
          isScam: false,
          description:
            'Legitimate business number for a local bank branch. No scam reports found.',
          dateReported: '2024-06-11T09:15:00Z',
        },
        {
          number: '+919876543210',
          isScam: true,
          description:
            'Frequent spam calls offering fake lottery winnings. Users advised not to answer.',
          dateReported: '2024-06-12T17:45:00Z',
        },
        {
          number: '+61298765432',
          isScam: false,
          description:
            'Customer service line for a utility company. Verified and safe.',
          dateReported: '2024-06-13T11:05:00Z',
        },
        {
          number: '+81312345678',
          isScam: true,
          description:
            'Reported phishing attempts claiming to be from a delivery service. Do not share personal information.',
          dateReported: '2024-06-14T08:30:00Z',
        },
      ],
      Report: [
        {
          reporterName: 'Amit Sharma',
          reportedNumber: '+919876543210',
          reportedDate: '2024-06-10T14:23:00Z',
          reportedDetails:
            'Received multiple calls claiming to be from a bank, asking for OTP and account details.',
          reportedReason: 'Phishing attempt',
        },
        {
          reporterName: 'Priya Verma',
          reportedNumber: '+919812345678',
          reportedDate: '2024-06-08T09:45:00Z',
          reportedDetails:
            'Caller threatened legal action and demanded immediate payment for a fake loan.',
          reportedReason: 'Extortion',
        },
        {
          reporterName: 'Rahul Singh',
          reportedNumber: '+919900112233',
          reportedDate: '2024-06-12T17:10:00Z',
          reportedDetails:
            'Automated message claiming to be from the Income Tax Department, requesting personal information.',
          reportedReason: 'Impersonation',
        },
        {
          reporterName: 'Sneha Patel',
          reportedNumber: '+919844556677',
          reportedDate: '2024-06-11T11:30:00Z',
          reportedDetails:
            'Caller offered a lottery win and asked for a processing fee to be paid upfront.',
          reportedReason: 'Lottery scam',
        },
        {
          reporterName: 'Vikas Mehra',
          reportedNumber: '+919855667788',
          reportedDate: '2024-06-09T16:05:00Z',
          reportedDetails:
            'Received repeated calls about a fake job offer, requesting payment for registration.',
          reportedReason: 'Job scam',
        },
      ],
      User: [
        {
          userName: 'Amit Sharma',
          email: 'amit.sharma@example.com',
          password: 'Qw3rty!2024',
          phoneNo: '+919876543210',
          registrationDate: '2024-06-10T09:15:23Z',
        },
        {
          userName: 'Priya Verma',
          email: 'priya.verma@example.com',
          password: 'Secur3Pass#1',
          phoneNo: '+919812345678',
          registrationDate: '2024-06-09T14:32:10Z',
        },
        {
          userName: 'Rahul Mehta',
          email: 'rahul.mehta@example.com',
          password: 'Passw0rd$2024',
          phoneNo: '+919900112233',
          registrationDate: '2024-06-08T18:45:55Z',
        },
        {
          userName: 'Sneha Kapoor',
          email: 'sneha.kapoor@example.com',
          password: 'Sneha@1234',
          phoneNo: '+919811223344',
          registrationDate: '2024-06-07T11:20:40Z',
        },
        {
          userName: 'Vikas Singh',
          email: 'vikas.singh@example.com',
          password: 'Vikas!5678',
          phoneNo: '+919822334455',
          registrationDate: '2024-06-06T16:05:30Z',
        },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('PhonenumberEntity', data.Phonenumber);
      await this.SeedResource('ReportEntity', data.Report);
      await this.SeedResource('UserEntity', data.User);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
